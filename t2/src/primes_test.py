from primes.miller_rabin import miller_rabin
from primes.fermat import fermat
import time
import csv

primes = {
    40: [701886890821, 145833959483],
    80: [627039700318015972526563, 17258016887375724832991],
    128: [281823669593790837253752644147169483721, 130149497672760612194506571911619816501],
    168: [53577236802344919857680454697879375307504576088927, 87638684248093818277104190540718855481257514307561],
    224: [9555570476784365604183370437996185501407868060964191196593302762711,
          11929041895336665885415245171139727014453130135351262254242333297897],
    256: [114521762541736572942175831292858847115978022297533643366336514473398296681259,
          11497252343705411796936888026497063219797667847435003967142716418374222663583],
    512: [
        11687988934730615085088752797282250379639560899809286759004164177768277835281798803059267186900959504974146952503606499671949523808002108371505014225254399,
        9168410681124379526825687234528018432644565710137901728047853853741091546896715023346942896824656130759676107735215870152242221051577686814226904972953379],
    1024: [
        4295990300262175286569706942624603289030853170013305621487189320909290520964802545145338800399484815159365124125403198362566442732009593596711195852873192072986050491252220531071318224293681475472026308169146527096204193789966266511659036316520094962867195427822246488653708362652700942480126595154117153523,
        4409718549809058718136578021895169493897055950058401244314045862374461586598984981007224313712892153648774256370485411186370689415870955619893596734411560764682357146184412176588364419785385753989349441526392553046352668450905445247325247631159384449414059944919242710890625383893079748692907335511203129151]
}

notPrimes = {
    40: [701886690821, 145834959483],
    80: [627039700318015972526565, 17258016887375724832992],
    128: [281823669593790837253752644147169483725, 130149497672760612194506571911619816502],
    168: [53577236802344919857680454697879375307504576088925, 87638684248093818277104190540718855481257514307563],
    224: [9555570476784365604183370437996185501407868060964191196593302762717,
          11929041895336665885415245171139727014453130135351262254242333297895],
    256: [114521762541736572942175831292858847115978022297533643366336514473398296681253,
          11497252343705411796936888026497063219797667847435003967142716418374222663587],
    512: [
        11687988934730615085088752797282250379639560899809286759004164177768277835281798803059267186900959504974146952503606499671949523808002108371505014225254397,
        9168410681124379526825687234528018432644565710137901728047853853741091546896715023346942896824656130759676107735215870152242221051577686814226904972953371],
    1024: [
        4295990300262175286569706942624603289030853170013305621487189320909290520964802545145338800399484815159365124125403198362566442732009593596711195852873192072986050491252220531071318224293681475472026308169146527096204193789966266511659036316520094962867195427822246488653708362652700942480126595154117153529,
        4409718549809058718136578021895169493897055950058401244314045862374461586598984981007224313712892153648774256370485411186370689415870955619893596734411560764682357146184412176588364419785385753989349441526392553046352668450905445247325247631159384449414059944919242710890625383893079748692907335511203129153]
}


def main():
    bits = primes.keys()

    fermat_results = open('fermat_results.csv', 'w+', newline='')
    fermat_writer = csv.writer(fermat_results, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    fermat_writer.writerow(["FERMAT - primes"])
    fermat_writer.writerow(["bits", "average time", "expected", "result"])
    for bit in bits:
        avg = 0
        for prime in primes[bit]:
            start = time.time()
            if fermat(prime):
                rst = 'true'
            else:
                rst = 'false'
            avg += (time.time() - start)/2
        fermat_writer.writerow([bit, avg, "true", rst])
        avg = 0

    fermat_writer.writerow(["FERMAT - not primes"])
    fermat_writer.writerow(["bits", "average time", "expected", "result"])
    for bit in bits:
        for prime in notPrimes[bit]:
            start = time.time()
            if fermat(prime):
                rst = 'true'
            else:
                rst = 'false'
            avg += (time.time() - start)/2
        fermat_writer.writerow([bit, avg, "false", rst])

    fermat_results.close()

    miller_rabin_results = open('miller_rabin_results.csv', 'w+', newline='')
    miller_rabin_writer = csv.writer(miller_rabin_results, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    miller_rabin_writer.writerow(["MILLER-RABIN - primes"])
    miller_rabin_writer.writerow(["bits", "average time", "expected", "result"])
    for bit in bits:
        avg = 0
        for prime in primes[bit]:
            start = time.time()
            if miller_rabin(prime):
                rst = 'true'
            else:
                rst = 'false'
            avg += (time.time() - start) / 2
        miller_rabin_writer.writerow([bit, avg, "true", rst])
        avg = 0

    miller_rabin_writer.writerow(["MILLER-RABIN - not primes"])
    miller_rabin_writer.writerow(["bits", "average time", "expected", "result"])
    for bit in bits:
        for prime in notPrimes[bit]:
            start = time.time()
            if miller_rabin(prime):
                rst = 'true'
            else:
                rst = 'false'
            avg += (time.time() - start) / 2
        miller_rabin_writer.writerow([bit, avg, "false", rst])

    miller_rabin_results.close()


if __name__ == "__main__":
    main()
